import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.HashMap;
import java.util.Stack;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.LinkedList;
import java.math.BigInteger;
 
public class App extends Application {
    // Stack-u per te ruajtur hapat e zgjidhjes se enigmes 
    static public Stack<GTNode> solPath = new Stack<GTNode>();
    // HashMap-I per te ruajtur gjendjen e meparsheme te vizituar/eksploruar
    static public HashMap<BigInteger, Integer> visited = new HashMap<BigInteger, Integer>();
    static double startTime;	// variabla per te ruajtur kohen fillestare te cdo algoritmit 
    static double endTime;	// variabla per te ruajtur kohen e fundit te cdo algoritmit

    public static void main(String[] args) {
        launch(args);
    }
    
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Sliding Puzzle");

        Text shenoDimensionin = new Text("Shënoni dimensionin: ");
        TextField dimensioni = new TextField();
        dimensioni.setMaxWidth(150);
        dimensioni.setMaxHeight(50);

        Text shenoAlgoritmin = new Text("\nShënoni algoritmin: ");
        TextField algoritmi = new TextField();
        algoritmi.setMaxWidth(150);
        algoritmi.setMaxHeight(50);
        
        Button bRandom = new Button("Random");
        bRandom.setMaxWidth(150);
        Button bShenoj = new Button("Shënoj");
        bShenoj.setMaxWidth(150);

        HBox rootNode1 = new HBox(10);
        TextField Value1 = new TextField("");
        TextField Value2 = new TextField("");
        TextField Value3 = new TextField("");
       
        Value1.setMaxSize(30, 30);
        Value2.setMaxSize(30, 30);
        Value3.setMaxSize(30, 30);
        
        rootNode1.getChildren().addAll(Value1,Value2,Value3);
        rootNode1.setVisible(false);

        HBox rootNode2 = new HBox(10);
        TextField Value4 = new TextField("");
        TextField Value5 = new TextField("");
        TextField Value6 = new TextField("");
        
        Value4.setMaxSize(30, 30);
        Value5.setMaxSize(30, 30);
        Value6.setMaxSize(30, 30);
        
        rootNode2.getChildren().addAll(Value4,Value5,Value6);
        rootNode2.setVisible(false);

        HBox rootNode3 = new HBox(10);
        TextField Value7 = new TextField("");
        TextField Value8 = new TextField("");
        TextField Value9 = new TextField("");
     
        Value7.setMaxSize(30, 30);
        Value8.setMaxSize(30, 30);
        Value9.setMaxSize(30, 30);
        
        rootNode1.setAlignment(Pos.CENTER);
    	rootNode2.setAlignment(Pos.CENTER);
    	rootNode3.setAlignment(Pos.CENTER);
    	
        rootNode3.getChildren().addAll(Value7,Value8,Value9);
        rootNode3.setVisible(false);
        
        Button gjejEnigmen = new Button("Gjej enigmën");
        gjejEnigmen.setMaxWidth(150);
        gjejEnigmen.setVisible(false);

        bRandom.setOnAction( e -> {
            if(dimensioni.getText().isEmpty() && algoritmi.getText().isEmpty()) {
                AlertBox(" Duhet të plotësohen fushat.\n Shëno dimensionin dhe algoritmin!");             
            }
            else if (!dimensioni.getText().isEmpty() && algoritmi.getText().isEmpty()) {            
                AlertBox("Duhet të plotësohet fusha.\n Shëno algoritmin.");                                
            }
            else if (dimensioni.getText().isEmpty() && !algoritmi.getText().isEmpty()) {
                AlertBox("Duhet të plotësohet fusha.\n Shëno dimensionin.");                                               
            }
            else {
                if((dimensioni.getText().equals("3") || dimensioni.getText().equals("4")) &&
                   (algoritmi.getText().equals("Astar") || algoritmi.getText().equals("BFS") ||
                   algoritmi.getText().equals("DFS") || algoritmi.getText().equals("ID")))  
                {
                    int Dimensioni = Integer.parseInt(dimensioni.getText());
                    randomInitialState(Dimensioni, algoritmi.getText());
                    
                    primaryStage.close();
                }
                else {
                    AlertBoxMeDimenzione("Te fusha e dimensionit duhet të shënoni 3 ose 4 per rendin\n" +
                                        " e matricës. Kurse te fusha e algoritmit duhet të shënoni\n" +
                                        " njërin nga algorimet Astar, BFS, DFS, ID.", 700, 200);                                                                  
                }
            }
        });

        bShenoj.setOnAction(e ->  {
            if(dimensioni.getText().isEmpty() && algoritmi.getText().isEmpty()) {
                AlertBox("Duhet të plotësohen fushat.\n Shëno dimensionin dhe algoritmin.");          
            }
            else if (!dimensioni.getText().isEmpty() && algoritmi.getText().isEmpty()) {
                AlertBox(" Duhet të plotësohet fusha.\n Shëno algoritmin.");            
            }
            else if (dimensioni.getText().isEmpty() && !algoritmi.getText().isEmpty()) {
                AlertBox("Duhet të plotësohet fusha.\n Shëno dimensionin.");
            }
            else {
                if((dimensioni.getText().equals("3") || dimensioni.getText().equals("4")) &&
                   (algoritmi.getText().equals("Astar") || algoritmi.getText().equals("BFS") ||
                   algoritmi.getText().equals("DFS") || algoritmi.getText().equals("ID")))  
                {
                    rootNode1.setVisible(true);
                    rootNode2.setVisible(true);
                    rootNode3.setVisible(true);
                    gjejEnigmen.setVisible(true);
                }
                else {
                    AlertBoxMeDimenzione("Te fusha e dimensionit duhet të shënoni 3 ose 4 për rendin\n" +
                                        " e matrices. Kurse te fusha e algoritmit duhet të shënoni\n" +
                                        " njërin nga algoritmet Astar, BFS, DFS, ID.", 700, 200);                                                                                            
                }
            }
        });
        
        gjejEnigmen.setOnAction(e -> {
            if(Value1.getText().isEmpty() || Value2.getText().isEmpty() || Value3.getText().isEmpty() ||
               Value4.getText().isEmpty() || Value5.getText().isEmpty() || Value6.getText().isEmpty() ||
               Value7.getText().isEmpty() || Value8.getText().isEmpty() || Value9.getText().isEmpty()) {
                    AlertBox("Duhet të plotësohen të gjitha fushat e matricës.");       
               
            }
            else if(!Value1.getText().matches("[0-9]") || !Value2.getText().matches("[0-9]") || 
            		!Value3.getText().matches("[0-9]") || !Value4.getText().matches("[0-9]") ||
            		!Value5.getText().matches("[0-9]") || !Value6.getText().matches("[0-9]") ||
            		!Value7.getText().matches("[0-9]") || !Value8.getText().matches("[0-9]") || 
            		!Value9.getText().matches("[0-9]")) {
            			  AlertBox("Duhët të shënohen vetëm numrat nga 0 deri në 8.");											 
            }
            else {
                int Dimensioni = Integer.parseInt(dimensioni.getText());
                Integer value1 = Integer.valueOf(Value1.getText());
                Integer value2 = Integer.valueOf(Value2.getText());
                Integer value3 = Integer.valueOf(Value3.getText());
                Integer value4 = Integer.valueOf(Value4.getText());
                Integer value5 = Integer.valueOf(Value5.getText());
                Integer value6 = Integer.valueOf(Value6.getText());
                Integer value7 = Integer.valueOf(Value7.getText());
                Integer value8 = Integer.valueOf(Value8.getText());
                Integer value9 = Integer.valueOf(Value9.getText());

                int matrix[][] = { { value1, value2, value3 },
                                { value4, value5, value6 }, 
                                { value7, value8, value9 } };
           
				if(solvable(Dimensioni, matrix) == false) {
					AlertBoxMeDimenzione("Kjo enigmë është e pazgjidhshme, ju lutem ndryshoni të dhënat.", 700, 200);
				} else {
					preWrittenInitialState(Dimensioni, algoritmi.getText(), matrix);
					primaryStage.close();
				}
            }
        });
        
        VBox root = new VBox();
        VBox.setMargin(rootNode1, new Insets(2, 2, 2, 2));
        VBox.setMargin(rootNode2, new Insets(2, 2, 2, 2));
        VBox.setMargin(rootNode3, new Insets(2, 2, 2, 2));
        VBox.setMargin(gjejEnigmen, new Insets(10, 0, 0, 0));
        VBox.setMargin(bRandom, new Insets(10, 0, 0, 0));
        VBox.setMargin(bShenoj, new Insets(10, 0, 10, 0)); 
        root.setPadding(new Insets(10, 10, 10, 10));
        root.getChildren().addAll(shenoDimensionin, dimensioni, shenoAlgoritmin, 
                                  algoritmi, bRandom, bShenoj, rootNode1, rootNode2, rootNode3, gjejEnigmen);
        root.setAlignment(Pos.CENTER);
        primaryStage.setScene(new Scene(root, 350, 450));
        primaryStage.show();
    }
    public static void randomInitialState(int dimension, String choseAlgorithm) {
        // dimenzioni eshte nje numer i plote qe e tregon rendin e matrices
        GTNode initial = new GTNode(dimension);
        // metoda fill thirret per te mbushur enigmen me numrat e duhur
        initial.fill();
        // shuffle e ben perzirjen e enigmes ne menyre te rastesishme
        initial.shuffle();

        if(choseAlgorithm.equals("Astar")) {
            Astar(initial);
        }
        else if(choseAlgorithm.equals("BFS")) {
            BFS(initial);
        }
        else if(choseAlgorithm.equals("DFS")) {
            DFS(initial);
        }
        else if(choseAlgorithm.equals("ID")) {
            ID(initial);
        }
        else {
            System.out.print("Keni shenuar gabim");
        }
    }

	public static boolean solvable(int dimension, int matrix[][]) {
		GTNode initial = new GTNode(dimension);
        initial.matrix = matrix;
        if(!initial.isSolvable()) {
			return false;
		}
		else {
			return true;
		}
	}

    // kjo metode perdoret kur ne e japim matricen 
    public static void preWrittenInitialState(int dimension, String choseAlgorithm, int matrix[][]) {
        GTNode initial = new GTNode(dimension);
        
        initial.matrix = matrix;

            if(choseAlgorithm.equals("Astar")) {
                Astar(initial);
            }
            else if(choseAlgorithm.equals("BFS")) {
                BFS(initial);
            }
            else if(choseAlgorithm.equals("DFS")) {
                DFS(initial);
            }
            else if(choseAlgorithm.equals("ID")) {
                ID(initial);
            }
            else {
                System.out.print("Keni shënuar gabim");
            }
        
    }
// kthen alert box-in ne baze te mesazhit qe ja japim dhe dimenzioneve
public static void AlertBoxMeDimenzione(String mesazhi, int gjersia, int gjatesia) {
  Text Shpjegimi = new Text(" ");
  Shpjegimi.setFont(Font.font("Book Antiqua", 18));
  Shpjegimi.setText(mesazhi);
  VBox boxShpjegimi = new VBox();
  boxShpjegimi.setAlignment(Pos.CENTER);
  boxShpjegimi.getChildren().addAll(Shpjegimi);
  Scene skenaShpjegimi = new Scene(boxShpjegimi, gjersia, gjatesia);
  Stage pamjaShpjegimi = new Stage();
  pamjaShpjegimi.setTitle("Shpjegimi");
  pamjaShpjegimi.setScene(skenaShpjegimi);
  pamjaShpjegimi.show();
}
// kthen alert box-in ne baze te mesazhit
public static void AlertBox(String mesazhi) {
  	Text Shpjegimi = new Text(" ");
  	Shpjegimi.setFont(Font.font("Book Antiqua",18));
  	Shpjegimi.setText(mesazhi);
  	VBox boxShpjegimi = new VBox();
  	boxShpjegimi.setAlignment(Pos.CENTER);
  	boxShpjegimi.getChildren().addAll(Shpjegimi);
  	Scene skenaShpjegimi = new Scene(boxShpjegimi, 400, 200);
  	Stage pamjaShpjegimi = new Stage();
  	pamjaShpjegimi.setTitle("Shpjegimi");
  	pamjaShpjegimi.setScene(skenaShpjegimi);
  	pamjaShpjegimi.show();
}
    // metoda per A* algoritmin e kerkimit
    public static void Astar(GTNode initial) {
        startTime = System.currentTimeMillis();
        // instancimi i openList si nje Priority Queue, sortimi sipas A* dhe ofrimi I gjendjes  fillestare
        PriorityQueue<GTNode> openList = new PriorityQueue<GTNode>();
        openList.offer(initial);
        GTNode state;
        while (!openList.isEmpty()) {
           // poll koken e PQ(ajo qe ka vleren A* me te vogel) per te eksplorur dhe shtu ate te lista e te vizituarve   
           // per tju ikur duplikateve
            state = openList.poll();
            visited.put(state.hash(state.matrix), state.astar);
            // kontrollon sa eshte kompletuar
            if (state.isComplete()) {
                // thirre metoden path qe e mbush Stack-un me gjendjen e zgjidhjeve
                path(state);
                endTime = System.currentTimeMillis();
                printInfo((endTime - startTime) / 1000.00);
                return;
            }
            // gjeneron gjendjet e mundeshme prej gjendjes aktuale
            state.exploreAstar(visited, openList);
        }
    }
    // Breadth-First Search algoritmi
    public static void BFS(GTNode initial) {
        startTime = System.currentTimeMillis();
        // inicializon openList sin je Queue dhe i ofron gjendjen fillestare
        Queue<GTNode> openList = new LinkedList<GTNode>();
        openList.offer(initial);
        GTNode state;
        while (!openList.isEmpty()) {
            // poll koken e PQ(ajo qe ka vleren A* me te vogel) per te eksplorur dhe shtu ate te lista e te vizituarve   
            // per tju ikur duplikateve
            state = openList.poll();
            visited.put(state.hash(state.matrix), 0);
            if (state.isComplete()) {
                // thirre metoden path qe e mbush Stack-un me gjendjen e zgjidhjeve
                path(state);
                endTime = System.currentTimeMillis();
                printInfo((endTime - startTime) / 1000.00);
                return;
            }
            // gjeneron gjendjet e mundeshme prej gjendjes aktuale
            state.explore(visited, openList);
        }
    }

    public static void DFS(GTNode initial) {
        startTime = System.currentTimeMillis();
        Stack<GTNode> openList = new Stack<GTNode>();
        openList.push(initial);
        GTNode state;
        while (!openList.isEmpty()) {
            state = openList.pop();
            visited.put(state.hash(state.matrix), 0);
            if (state.isComplete()) {
                path(state);
                endTime = System.currentTimeMillis();
                printInfo((endTime - startTime) / 1000.00);
                return;
            }
            state.explore(visited, openList, -1);
        }
    }

    public static void ID(GTNode initial) {
        startTime = System.currentTimeMillis();
        Stack<GTNode> openList = new Stack<GTNode>();
        int limit = 0;
        while (true) {
            openList.clear();
            visited.clear();
            openList.push(initial);
            GTNode state;
            while (!openList.isEmpty()) {
                state = openList.pop();
                visited.put(state.hash(state.matrix), 0);
                if (state.isComplete()) {
                    path(state);
                    endTime = System.currentTimeMillis();
                    printInfo((endTime - startTime) / 1000.00);
                    return;
                }
                state.explore(visited, openList, limit);
            }
            limit++;
        }
    }
    // e shton zgjidhjen e path-it ne nje stack
    public static void path(GTNode c) {
        while (c.parent != null) {
            solPath.push(c);
            c = c.parent;
        }
        solPath.push(c);
    }
    // printon hapat e zgjidhjes dhe daljen e algoritmit
    public static void printInfo(double time) {
        // madhsia e stack-ut – 1 jane levizjet e kerkuara per te gjetur zgjidhjen
        int moves = solPath.size() - 1;

        Text antari00 = new Text(" ");
        Text antari01 = new Text(" ");
        Text antari02 = new Text(" ");
        Text antari10 = new Text(" ");
        Text antari11 = new Text(" ");
        Text antari12 = new Text(" ");
        Text antari20 = new Text(" ");
        Text antari21 = new Text(" ");
        Text antari22 = new Text(" ");
        antari00.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari01.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari02.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari10.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari11.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari12.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari20.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari21.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        antari22.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        
        Button kontrollo = new Button("Kontrollo");
        Text hapsire = new Text("\n");

        kontrollo.setOnAction(e -> {
            if (!solPath.empty()) {
                GTNode p = (GTNode) solPath.pop();
                
                int matrix[][] = { { p.print().get(0), p.print().get(1), p.print().get(2) }, 
                                   { p.print().get(3), p.print().get(4), p.print().get(5) }, 
                                   { p.print().get(6), p.print().get(7), p.print().get(8) } };
                                  
                antari00.setText(String.valueOf(matrix[0][0]));
                antari01.setText(String.valueOf(matrix[0][1]));
                antari02.setText(String.valueOf(matrix[0][2]));
                antari10.setText(String.valueOf(matrix[1][0]));
                antari11.setText(String.valueOf(matrix[1][1]));
                antari12.setText(String.valueOf(matrix[1][2]));
                antari20.setText(String.valueOf(matrix[2][0]));
                antari21.setText(String.valueOf(matrix[2][1]));
                antari22.setText(String.valueOf(matrix[2][2]));         
            }
        });
        
        HBox rreshti1 = new HBox();
        rreshti1.getChildren().addAll(antari00, antari01, antari02);
        rreshti1.setAlignment(Pos.CENTER);
        rreshti1.setSpacing(15);

        HBox rreshti2 = new HBox();
        rreshti2.getChildren().addAll(antari10, antari11, antari12);
        rreshti2.setAlignment(Pos.CENTER);
        rreshti2.setSpacing(15);

        HBox rreshti3 = new HBox();
        rreshti3.getChildren().addAll(antari20, antari21, antari22);
        rreshti3.setAlignment(Pos.CENTER);
        rreshti3.setSpacing(15);

        VBox box = new VBox();
        box.getChildren().addAll(kontrollo, hapsire, rreshti1, rreshti2, rreshti3);
        box.setAlignment(Pos.CENTER);
        Scene skena = new Scene(box, 400, 200);
        Stage pamja = new Stage();
        pamja.setTitle("Shfaqja e lëvizjeve");
        pamja.setScene(skena);
        pamja.show();

        PrintimiIKohesDheLevizjeve(moves, time);
    }
    public static void PrintimiIKohesDheLevizjeve(int levizjet, double koha) {
        Text shumaELevizjeve = new Text(" ");
        Text kohaTotale = new Text(" ");

        shumaELevizjeve.setFont(Font.font("Book Antiqua", 18));
        kohaTotale.setFont(Font.font("Book Antiqua", 18));

        shumaELevizjeve.setText("Zgjidhja është bërë nga " + levizjet + " lëvizje.");
        kohaTotale.setText("Koha : " + koha + " sekonda.");

        VBox box = new VBox();
        box.setAlignment(Pos.CENTER);
        box.getChildren().addAll(shumaELevizjeve, kohaTotale);
        Scene skena = new Scene(box, 400, 200);
        Stage pamja = new Stage();
        pamja.setTitle("Koha dhe lëvizjet");
        pamja.setScene(skena);
        pamja.show();
    }

}
